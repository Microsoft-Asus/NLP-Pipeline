Introduction
============

This package contains an English finite state morphology which is based on SFST Programming language and the lexicon which accompanies it has been extracted from Universal Dependencies 2.0 training dataset. 


How to compile and run the morphology
=====================================

In order to run the tools, you first have to install the SFST tools from http://www.cis.uni-muenchen.de/~schmid/tools/SFST/ and follow the instructions in its readMe file. 

Then you can compile the morphology by running the command "make".

You can test it from command line using: 

> fst-mor morph.a
reading transducer...
finished.
analyze> walking
walking<NN>
walk<VBG>
analyze> be
be<VB>
be<NN>
analyze> was
be<VBD>
be<VBN>
wa<NNS>
analyze> 
generate> be<VBD>
was
were
generate> q

which will start an interactive program for analysis. Press return to switch to generation mode or q to quit the program. 


To run the morphology in batch mode use:
> fst-mor1 morph.a “walking” 

which will output 

walking<NN>
walk<VBG>


How to develop/modify the morphology
====================================

1. Read Documentation:
  a) Read the SFST manual and following the tutorials in doc folder of SFST tools
  b) Look at the SFST data examples and try to understand how they work

2. Do the linguistic work:
   a) Define lexicon word entries
   b) Define the set of word classes 
   c) Define the inflectional classes
   d) What are the derivational prefixes and their features?
   e) What are the derivational suffixes and their features?
   f) Which features will be used in the morphological analyses?

3. Write lexicon entries and store them in the file "lexicon".
   Add entries for derivational prefixes and suffixes.

   Add all entries whose inflections obey general and exception rules defined in inflection.fst and phon.fst explicitely in “morph.lex”

   The Perl script morph-match.perl can be used to do the necessary
   alignment of lemma and surface form automatically and generate the corresponding  
   transducers. Try for instance:

   echo "mice\tmouse\tN base native NounPl" | ./morph-match.perl
   
   Add those explicit transducers to “irregular.lex” for direct treatment in morphological processing.  

4. Modify symbols.fst to include your word classes, inflectional classes
   and morphosyntactic features. 


5. Define the different inflectional paradigms in "inflection.fst".

6. Write the morpho-phonological rules which transform the morpheme
   sequences to the correct surface strings and store them in "phon.fst".

7. Compile and debug the morphology (modify makefile accordingly if you add any other file that needs to be compiled to compile the main file morph.fst)

Debugging
=========

If the result is not what you have expected, you can use the following
tricks:

Check whether the compiler produces warnings of the form "assignment
of empty transducer to:". If so, check whether it is okay that the
transducer generated at this point is empty. You will find the
respective source code line at the beginning of the line with the
compiler warning.

In order to check an intermediate result of the compilation, which is
stored in $X$, you can proceed as follows:

1. Insert the command
	$X$ >> "ValueofX.a"
   in the source code after the commands which compute $X$

2. Compile

3. Examine the file "ValueofX.a":
   You can print the transducer with the command
	fst-print ValueofX.a
   You can generate with the transducer using the command
	fst-generate ValueofX.a
   You can use the command
	fst-mor ValueofX.a
   to check interactively how the transducer maps the input strings.

4. Often it is also useful to reduce the lexicon to the smallest number
   of entries needed to test something. (But don't forget to make a
   backup of the full lexicon first!)

Helmut Schmid & Meryem M’hamdi
